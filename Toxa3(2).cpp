// Toxa3(2).cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include<stdio.h>
#include<time.h>
#include<sys/time.h>
#define M 100
#define E 0.00001
#define T 0.01 
double A[M][M], F[M], Xk[M], Zk[M];
double Rk[M], Sz[M], alf, bet, mf;
double Spr, Spr1, Spz;
int main()
{
	int i, j, v;
	struct timeval tv1, tv2;
	long int dt1;
	/* Генерация данных. Здесь задается матрица с
	элементами равными 1,
	* по диагонали равными 2. Матрица берется хорошо
	обусловленной и
	* симметричной. При правой части равной M+1 все корни
	будут равными 1 */
	for (mf = 0, i = 0; i < M; i++)
	{
		for (j = 0; j < M; j++)
		{
			if (i == j)
				A[i][j] = 2.0;
			else
				A[i][j] = 1.0;
		}
		F[i] = M + 1;
		/* Сразу вычисляем сумму квадратов элементов вектора F,
		* т.е. подкоренное выражение формулы (7). */
		mf += F[i] * F[i];
	}
	/* Задаем начальное приближение корней. В Хk хранятся
	значения корней
	* к-й итерации. */
	for (i = 0; i < M; i++)
		Xk[i] = 0.2;
	/* Задаем начальное значение r0 и z0. */
	for (i = 0; i < M; i++)
	{
		for (Sz[i] = 0, j = 0; j < M; j++)
			Sz[i] += A[i][j] * Xk[j];
		Rk[i] = F[i] - Sz[i];
		Zk[i] = Rk[i];
	}
	/* Засекаем время начала вычислений. */
	gettimeofday(&tv1, NULL);
	do
	{
		/* Вычисляем числитель и знаменатель для коэффициента
		* αk = (rk-1,rk-1)/(Azk-1,zk-1) */

		Spz = 0;
		Spr = 0;
		for (i = 0; i < M; i++)
		{
			for (Sz[i] = 0, j = 0; j < M; j++)
				Sz[i] += A[i][j] * Zk[j];
			Spz += Sz[i] * Zk[i];
			Spr += Rk[i] * Rk[i];
		}
		alf = Spr / Spz; /* αk */

	   /* Вычисляем вектор решения: xk = xk-1+ αkzk-1,
		вектор невязки: rk = rk-1- αkAzk-1 и числитель для βk равный
	   (rk,rk) */
		Spr1 = 0;
		for (i = 0; i < M; i++)
		{
			Xk[i] += alf * Zk[i];
			Rk[i] -= alf * Sz[i];
			Spr1 += Rk[i] * Rk[i];
		}
		/* Вычисляем βk */
		bet = Spr1 / Spr;
		/* Вычисляем вектор спуска: zk = rk+ βkzk-1 */
		for (i = 0; i < M; i++)
			Zk[i] = Rk[i] + bet * Zk[i];
	}
	/* Проверяем условие выхода из итерационного цикла */
	while (Spr1 / mf > E * E);
	/* Засекаем время конца вычислений. Время решения
	задачи выводим на экран */
	gettimeofday(&tv2, (struct timezone*)0);
	dt1 = (tv2.tv_sec - tv1.tv_sec) * 1000000 +
		tv2.tv_usec - tv1.tv_usec;
	printf("Time = %d\n", dt1);
	/* Для контроля выводим 8 первых корней */
	printf(" %f %f %f %f %f %f %f
		% f\n",Xk[0],Xk[1],Xk[2],Xk[3],Xk[4],Xk[5],
		Xk[6], Xk[7]);
	return(0);
}


// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
